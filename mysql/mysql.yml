apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard # 依赖 Kubernetes 预定义的 StorageClass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector: # 用于选择 Pod
    matchLabels:
      app: mysql
  template: # 定义了 Pod 的配置、标签等。
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: crpi-iay62pbhw1a58p10.cn-hangzhou.personal.cr.aliyuncs.com/visage-namespace/mysql:5.7
          imagePullPolicy: IfNotPresent # 如果本地有这个镜像，K8s 就不会去远程拉取。
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "zxj201328" # 生产环境请使用 Secret 管理敏感信息
          ports:
            - containerPort: 3306
          volumeMounts: # 定义了容器内部的存储卷挂载点。
            - mountPath: "/var/lib/mysql" # 指定容器内的路径，/var/lib/mysql 是 MySQL 数据库默认存放数据的目录。
              name: mysql-storage # 关联到 volumes 定义的存储卷
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
      imagePullSecrets:
        - name: my-registry-secret  # 指定docker仓库 Secret
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      # Service 在 Kubernetes 集群内部暴露的端口
      port: 3306
      # pod 内部 MySQL 进程监听的端口
      targetPort: 3306
  # clusterIP: None 让 Service 变成 无头服务，不会有 ClusterIP 进行负载均衡。
  #	适用于需要直接访问 Pod IP 的场景（如数据库、StatefulSet 组件）。
  #	Kubernetes DNS 解析会返回所有 Pod 的 IP，客户端可以自行决定连接哪个 Pod。
  clusterIP: None