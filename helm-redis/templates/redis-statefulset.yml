apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.name.cluster}}  # StatefulSet 的名称，通常是 Redis 服务的名称
spec:
  serviceName: {{ .Values.name.service}}  # 关联的 headless service 名称，用于网络发现
  replicas: {{ .Values.image.replicas}}  # 设置 Pod 副本数，这里是 1
  selector:
    matchLabels:
      app: {{ .Values.name.container}}  # 用于选择具有 app: Redis 标签的 Pod
  template:
    metadata:
      labels:
        app: {{ .Values.name.container}}  # 为 Pod 添加标签 app: Redis
    spec:
      containers:
        - name: {{ .Values.name.container}}  # 容器的名称
          image: {{ .Values.image.container}}  # Redis 镜像
          imagePullPolicy: {{ .Values.image.imagePullPolicy}}  # 如果本地已有镜像则不再拉取
          env:
            - name: REDIS_PASSWORD
              value: "{{ .Values.env.password}}"  # redis 密码
            - name: REDIS_CLUSTER_ENABLED
              value: "{{ .Values.env.cluster_enabled}}"  # 是否启用集群模式
            - name: REDIS_LOG_LEVEL
              value: "{{ .Values.env.log_level}}"  # 设置 Redis 日志的级别
            - name: REDIS_MAXMEMORY
              value: "{{ .Values.env.max_memory}}"  # 设置 Redis 的最大内存使用量
            - name: REDIS_MAXCLIENTS
              value: "{{ .Values.env.max_clients}}"  # 设置 Redis 允许的最大客户端连接数
            - name: REDIS_SAVE_INTERVALS
              value: "{{ .Values.env.rdb_save_interval}}"  # 设置 RDB 快照的保存间隔
            - name: REDIS_APPENDONLY
              value: "{{ .Values.env.aof_enabled}}"  # 是否启用 AOF 持久化
            - name: REDIS_AOF_FSYNC
              value: "{{ .Values.env.aof_fsync}}"  # 设置 AOF 文件的同步策略
            - name: REDIS_PORT
              value: "{{ .Values.service.port}}"  # Redis 服务的端口
            - name: REDIS_DATA_DIR
              value: "{{ .Values.pvc.path}}"  # Redis 数据存储路径
          ports:
            - containerPort: {{ .Values.service.port}}  # 容器内部 Redis 服务的端口
          volumeMounts:
            - mountPath: "{{ .Values.pvc.path}}"  # 容器内数据存储路径，Redis 数据库默认存储位置
              name: {{ .Values.name.pvc}}  # 关联 volume 的名称（必须与 volumeClaimTemplates 中的名称一致）
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret}} # 如果需要从私有镜像仓库拉取镜像，指定镜像仓库的 Secret
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.name.pvc}}  # PVC 的名称，StatefulSet 会为每个 Pod 自动创建与此名称相关的 PVC
      spec:
        accessModes:
          - {{ .Values.pvc.accessModes}}  # 数据只能由一个 Pod 读写
        resources:
          requests:
            storage: {{ .Values.pvc.storage}}  # 为每个 Pod 分配 存储
        storageClassName: {{ .Values.name.storageClass}}  # 使用自定义的，回收策略为保留的storageClass